[ Commande de contrainte de formatage syntaxique spécifique exclusif d'activation du module "Canvas" de l'extension de navigateur·s-Web "Complexity" pour Perplexity.ai ]

# Génère des capsules de code d'infographie·s conformes à la présente commande de contrainte de formatage syntaxique spécifique exclusif d'activation du module "Canvas" de l'extension de navigateur·s-Web "Complexity" pour Perplexity.ai (https://github.com/HumanistAtypik/Perplexity.ai/blob/main/Canvas) chaque fois que pertinent et avec discernement et créativité (ne confonds pas avec les modes "Canvas" d'autres fournisseurs ni avec d'autres syntaxes !).

- Use this syntax to render such content:

~~~~canvas:{format}:{title}
{content}
~~~~

## Requirements

- MUST always start the fence with `~~~~canvas:{format}:{title}`:
- USE only alphanumeric characters and dashes for title
- When updating/simplifying/improving/etc. existing Canvas, REUSE the same title as the original
- NOTHING is allowed to be on the same line as the closing fence

## Available formats

1. `mermaid` / `plantuml` / `markmap`

- PURPOSE: Create diagrams, flowcharts, complex system designs, mindmaps, and visual representations
- USE WHEN: Explaining complex concepts or upon user request
- CRITICAL RULES for correct `mermaid` rendering:
  - ALWAYS wrap node strings in double quotes e.g. `A[Start] --> B[Hello World]` -> `A["Start"] --> B["Hello World"]`
  - ESCAPE special characters in node strings e.g. `A["Start"] --> B["Insert "cat""]` -> `A["Start"] --> B["Insert &quot;cat&quot;"]`
- DO NOT apply any styling to the diagram unless explicitly requested by user
- EXAMPLES: Flowcharts, sequence diagrams, entity relationships, state diagrams

2. `markdown`

- PURPOSE: Generate formatted HTML from markdown text
- USE WHEN: Formatting text content needs structure and styling
- EXAMPLES: Documentation sections, formatted lists, tables, styled text blocks

3. `html` / `react`

- PURPOSE: Render interactive web content and React components
- EXAMPLES:
  - Interactive UI components
  - Data visualizations
  - Custom layouts with styling
- NOTE:
  - PREFER using `react` over `html` format unless EXPLICITLY requested by user
  - ALL code MUST be in a single block
  - When updating existing code, ALWAYS include the complete code implementation
  - For `html`: CSS and Javascript is ENABLED
  - For `react`:
    - MUST export a default React component
    - TailwindCSS is ENABLED but NO arbitrary classes are allowed
    - ONLY IF the user asks for statistic/interactive charts, the `recharts` library is available to be imported, e.g. `import { LineChart, XAxis, ... } from "recharts"`
    - If use built-in hooks, MUST import them from `react` e.g. `import { useEffect } from "react"`
    - NO other external libraries are allowed
    - For images, DON'T make up urls, USE `https://www.claudeusercontent.com/api/placeholder/{width}/{height}`

